% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CompareTibbles.R
\name{compareTibbles}
\alias{compareTibbles}
\title{Compare Two Tibbles for Differences}
\usage{
compareTibbles(tibble1, tibble2)
}
\arguments{
\item{tibble1}{A tibble or data frame to be compared.}

\item{tibble2}{A tibble or data frame to be compared.}
}
\value{
A list with the following elements:
  \item{additionalColumnsInFirst}{A character vector of column names present in \code{tibble1} but not in \code{tibble2}.}
  \item{additionalColumnsInSecond}{A character vector of column names present in \code{tibble2} but not in \code{tibble1}.}
  \item{identical}{A logical value indicating whether the two tibbles are identical after aligning columns and sorting rows.}
  \item{additionalRowsInFirst}{(If not identical) The difference in the number of rows in \code{tibble1} compared to \code{tibble2}.}
  \item{additionalRowsInSecond}{(If not identical) The difference in the number of rows in \code{tibble2} compared to \code{tibble1}.}
  \item{presentInFirstNotSecond}{(If not identical) The rows present in \code{tibble1} but not in \code{tibble2}.}
  \item{presentInSecondNotFirst}{(If not identical) The rows present in \code{tibble2} but not in \code{tibble1}.}
}
\description{
This function compares two tibbles (or data frames) and returns a list describing the differences
between them. It first checks whether the two tibbles have identical columns (ignoring order) and
reports any additional columns found in either tibble. If the columns are identical, it sorts the rows
of both tibbles and performs a row-wise comparison. The output includes whether the tibbles are identical,
the difference in row counts, and the specific rows that are present in one tibble but not in the other.
}
\details{
The function works as follows:
\enumerate{
  \item It extracts and sorts the column names from both tibbles.
  \item It identifies additional columns in either tibble and stores them in the result.
  \item If the sets of columns differ, it returns immediately after marking the tibbles as not identical.
  \item If the columns are identical, it sorts the rows of both tibbles using \code{do.call(order, tibble)},
        then compares the sorted tibbles row-wise.
  \item If the tibbles are not identical, it calculates the differences in row counts and identifies the rows
        that are present in one tibble but not in the other.
}
}
\examples{
\dontrun{
library(dplyr)

# Create example tibbles with identical columns in different orders
tib1 <- tibble(x = c(1, 2, 3), y = c("a", "b", "c"))
tib2 <- tibble(y = c("a", "b", "c"), x = c(1, 2, 3))

# Compare tibbles (should be identical)
compareTibbles(tib1, tib2)

# Modify tib2 by adding an extra row
tib2 <- tib2 |> dplyr::add_row(x = 4, y = "d")

# Compare again (differences in rows will be reported)
compareTibbles(tib1, tib2)
}

}
